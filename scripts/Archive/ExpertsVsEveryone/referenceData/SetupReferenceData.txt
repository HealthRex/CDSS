# Run the following SQL in the database

INSERT INTO collection_type (collection_type_id, name, description) VALUES
	(5, 'DiagnosisLink', 'Link an (admission) diagnosis designated by clinical_item_id to the reference guidelines and order set collections identified by item_collection_ids, which in turn should be aggregated by item_collection.name');


# Copy columns of data from Diagnosis and Order Worksheets into 
#	item_collection.update.tab, item_collection_item.diagnosisLink.update.tab, item_collection_item.referenceOrders.update.tab

# Clear out any previous reference data (but keep the fixed order set data)
# (May want to backup database before running these commands)
# Populate the database with updates to the item_collection and item_collection_item tables to add more reference collections
python updateReferenceData.py



# Example Queries
-- All of the existing Order Set sections related to different admission diagnosis items of interest
select ci.clinical_item_id, ci.name, ci.description, ic.item_collection_id, ic.name, ic.section, ic.subgroup
from item_collection as ic, item_collection_item as ici, clinical_item as ci
where ic.item_collection_id = ici.item_collection_id
and ici.clinical_item_id = ci.clinical_item_id
and ici.collection_type_id = 5 -- Diagnosis Link
and ici.value = 4 -- (Existing) Order Sets
order by ci.description, ic.name, ic.section, ic.subgroup

-- Enumerate all Order Set items per linked admission diagnosis
select dxci.clinical_item_id, dxci.name, dxci.description, ic.item_collection_id, ic.name, ic.section, ic.subgroup, ci.clinical_item_id, ci.name, ci.description
from clinical_item as dxci, item_collection_item as dxici, item_collection as ic, item_collection_item as ici, clinical_item as ci
where dxci.clinical_item_id = dxici.clinical_item_id
and dxici.item_collection_id = ic.item_collection_id
and ic.item_collection_id = ici.item_collection_id
and ici.clinical_item_id = ci.clinical_item_id
and dxici.collection_type_id = 5 -- Diagnosis Link
and dxici.value = 4 -- Existing Order Sets
and ici.collection_type_id = dxici.value
order by dxci.description, ci.name


-- Order Set items per linked admission diagnosis, grouped by unique item, excluding those that usually are not considered for recommendations (e.g., nursing orders)
select dxci.clinical_item_id, dxci.name, dxci.description, ci.clinical_item_id, ci.name, ci.description, count(*)
from clinical_item as dxci, item_collection_item as dxici, item_collection as ic, item_collection_item as ici, clinical_item as ci, clinical_item_category as cic
where dxci.clinical_item_id = dxici.clinical_item_id
and dxici.item_collection_id = ic.item_collection_id
and ic.item_collection_id = ici.item_collection_id
and ici.clinical_item_id = ci.clinical_item_id
and ci.clinical_item_category_id = cic.clinical_item_category_id
and dxici.collection_type_id = 5 -- Diagnosis Link
and dxici.value = 4 -- Existing Order Sets
and ici.collection_type_id = dxici.value
and ci.analysis_status <> 0 and ci.default_recommend <> 0 and cic.default_recommend <> 0 -- Filter out items not usually considered for recommendation
group by dxci.clinical_item_id, dxci.name, dxci.description, ci.clinical_item_id, ci.name, ci.description
order by dxci.description, ci.name





-- Items referenced in guidelines as appropriate to consider for linked admission diagnoses, 
--	excluding those with a weak (IIb ~ 2.5) or worse (III ~ 3) recommendation
--	excluding those that usually are not considered for recommendations (e.g., nursing orders)
-- Add/Remove ic.subgroup grouping depending on if want to separate per rater
--	To identify rater discrepancies, group by WITHOUT subgroup=rater and check HAVING count = 1 (means only 1 rater included)
select ic.subgroup, dxci.clinical_item_id, dxci.name, dxci.description, ci.clinical_item_id, ci.name, ci.description, count(*)
from
    clinical_item as dxci, item_collection_item as dxici, item_collection as ic, 
    item_collection_item as refici,
    item_collection_item as recici,
    clinical_item as ci, clinical_item_category as cic
where dxci.clinical_item_id = dxici.clinical_item_id
and dxici.item_collection_id = ic.item_collection_id
and ic.item_collection_id = refici.item_collection_id
and refici.clinical_item_id = ci.clinical_item_id
and ci.clinical_item_category_id = cic.clinical_item_category_id

and dxici.collection_type_id = 5 -- Diagnosis Link
and dxici.value = 3 -- Guidelines referenced
and refici.collection_type_id = dxici.value
and refici.value < 2.5 -- Exclude references to NOT recommend and those with borderline or secondary use

and recici.collection_type_id = 1 -- Look for items that are referenced AND recommended
and recici.clinical_item_id = refici.clinical_item_id
and recici.item_collection_id = refici.item_collection_id
and recici.value < 2.5 -- Only count relatively positive recommendations (better than IIb ~2.5)

and ci.analysis_status <> 0 and ci.default_recommend <> 0 and cic.default_recommend <> 0 -- Filter out items not usually considered for recommendation
group by ic.subgroup, dxci.clinical_item_id, dxci.name, dxci.description, ci.clinical_item_id, ci.name, ci.description
order by ic.subgroup, dxci.description, ci.name;
