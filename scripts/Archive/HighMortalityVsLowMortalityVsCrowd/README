## Extract Patient Encounter Feature Matrix (for both mortality prediction and matching):

1) extract_diagnosis_codes.py
Extract the top admission diagnosis codes; this enables us to map clinical_item_ids to actual diagnosis descriptions

2) extract_age.py
Extract the age of each patient; this is directly used as a covariate

3) extract_admission_discharge_flow.py
Extract the admissions, transfers, and discharges for each patient; this helps us track a patient's flow through the hospital for each of his/her encounters

4) extract_treatment_team.py
Extract the treatment team responsible for each patient encounter; this is directly used as a covariate

5) extract_last_recorded_admission_diagnosis.py
Extract admission diagnosis associated with patient's last recorded encounter; this is directly used as a covariate

6) extract_mortality.py
Extract whether or not a patient died within 30-days of an admission order; this is used as the response variable in our mortality model

7) extract_physician_patient_map.py
Extract physicians responsible for patients based on H&P note or Discharge Summary note; effectively a physician to patient mapping

8) extract_encounter_data.py
Extracts initial vital signs, lab tests, Charlson comorbidity indices, and basic demographic data for all patient encounters within a time window (e.g. 2008-2009, 2010-2013)

9) /Users/jwang/Desktop/Results/scripts/reorder_data.py
Reorders the raw, half-complete feature tables (.tab files) generated by extractData_modified_2.py so that the last recorded patient encounter is appears first (from top to bottom)

10) clean_data.py
Organizez data from various outputted files to create a coherent a cohere patient feature matrix to be used for mortality prediction and matching; note that we isolate the last recorded encounter for each patient, although we start out with patient data from all encounters

## Build Expected Mortality Predictor:

1) mortality_predictor.Rmd
Builds model to predict a patient's probability of mortality within 30 days of their last recorded admission order

2) remap_ids_mortality_probs.py
Remaps R-friendly normalized patient_ids to actual patient_ids recored in the stride/medinfo databases

3) compute_observed_vs_expected_mortality.py						
Computes the expected and observed dead and survived patient counts for all physicians; outputs +/-log(p-value) scores for all physicians which we use to stratify into top and bottom performing cohorts

## Propensity Score Matching (Before Association Model Training):

1) extract_unmatched_patients.py
Assemble patient cohorts associated with the top and bottom clinician cohorts; outputs unmatched feature matrices to be fed into matching.Rmd

2) matching.Rmd
Propensity score matching to balance patient cohorts prior to training the top and bottom patient cohort association models

3) remap_ids_matching.py
Remaps R-friendly normalized patient_ids to actual patient_ids recored in the stride/medinfo databases; these top and bottom cohort patient_ids can then be fed into AssociationModel.py

## Better Than Expected Evaluation:
Evaluate assocation models against patient cases in which mortality outcomes turned out better than expected 

1) Extract delta between last admission and mortality date (if present) per patient in 2010-2013
extract_mortality_unbinned.py

2) Create aggregated patient mortality probability and observed mortality delta spreadsheet
join_probs_mortality_delta.py

3) Extract "better than expected" patient cases that are not included in balanced patient cohorts inputted for association model training
extract_better_than_expected_patients.py

4) Extract order set usage instances, items leading up to the instance to query trained association model, and items after the instance for evaluation
prepare_query_and_verify_items.py

5) Generate raw evaluation statistics, comparing recommended items or order set against verify items
Make sure to change LocalEnv.py to point to corresponding database.
For Association Models: evaluate_association_models_recommended_items_against_verify_items.py

For Order Sets: evaluate_ordersets_against_verify_items.py

6) Aggregate raw evaluation statistics in preparation for plotting; output pickle arrays for precision, recall, f1-score, and auroc
aggregate_evaluation_metrics.py

7) Plot line chart of evaluation statistics
Better_Than_Expected_Evaluation_Bar_Plot.ipynb

## Miscellaneous
A) extract_30_day_readmissions.py	
Extract whether or not a patient was readmitted within 30-days of a discharge order

B) extract_lengths_of_stay.py		
Extract the length of stay from intial to final discharge for each patient encounter

C) mortality_or_readmission_predictor.Rmd
Builds model to predict a patient's probability of either being readmitted or dying within 30 days of their last recorded admission order

D) compute_observed_vs_expected_mortalityORreadmission.py	
Computes the expected and observed dead/readmitted and healthy patient counts for all physicians
																						
