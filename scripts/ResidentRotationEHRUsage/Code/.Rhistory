length(strsplit(speeches[1], split=" ")
)
length(strsplit(speeches[1], split=" ")
strsplit(speeches[1], split=" ")
strsplit(speeches[1], split=" ")[1]
length(strsplit(speeches[1], split=" "))
as.vector(strsplit(speeches[1], split=" "))
length(as.vector(strsplit(speeches[1], split=" ")))
strsplit(speeches[1], split=" ")
strsplit(speeches[1], split=" ")[[1]]
length(strsplit(speeches[1], split=" ")[[1]])
speeches_word_count = c()
for (i in 1:length(speeches)) {
speeches_word_count = c(speeches_word_count, length(strsplit(speeches[i], split=" "))[[i]])
}
speeches_word_count = c()
for (i in 1:length(speeches)) {
speeches_word_count = c(speeches_word_count, length(strsplit(speeches[i], split=" ")[[i]]))
}
speeches_word_count = c()
for (i in 1:length(speeches)) {
speeches_word_count = c(speeches_word_count, length(strsplit(speeches[i], split=" ")[[1]]))
}
speeches[3]
speech.table <- data.frame(speakers, receivers, speeches_word_count)
View(speech.table)
?table
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- data.frame(speech_pairs, speeches_word_count)
speakers <- xpathSApply(caesar, "//*/SPEECH/SPEAKER", xmlValue)
length(speakers)
receivers <- xpathSApply(caesar, "//*/SPEECH/RECEIVER", xmlValue)
length(receivers)
speeches <- xpathSApply(caesar, "//*/SPEECH/LINES", xmlValue)
speeches[1]
# count number of words in each speech
speeches_word_count = c()
for (i in 1:length(speeches)) {
speeches_word_count = c(speeches_word_count, length(strsplit(speeches[i], split=" ")[[1]]))
}
# create table of speech_pairs, speech word count
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- data.frame(speech_pairs, speeches_word_count)
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- data.frame(speech.pairs, speeches_word_count)
View(speech.table)
library(dplyr)
play.table <-  speech.table %>%
group_by(ind=speech.table$speech.pairs) %>% summarise(value=sum(speech.pairs$speeches_word_count))
play.table <-  speech.table %>%
group_by(ind=speech.table$speech.pairs) %>% summarise(value=sum(speech.pairs$speeches_word_count), key=first(key))
play.table <-  dplyr::summarise(speech.table, speeches_word_count=sum(speeches_word_count))
View(play.table)
play.table <- dplyr::group_by(speech.table, speech.pairs) %>% dplyr::summarise(speech.table, speeches_word_count=sum(speeches_word_count))
play.table <- play.table %>% dplyr::group_by(speech.pairs) %>% dplyr::summarise( speeches_word_count=sum(speeches_word_count))
library(dplyr)
play.table <- speech.table %>% dplyr::group_by(speech.pairs) %>% dplyr::summarise( speeches_word_count=sum(speeches_word_count))
View(play.table)
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- data.frame(speech.pairs, speeches_word_count)
# aggregate on speech pair, summing word counts
library(dplyr)
speech.table <- speech.table %>% dplyr::group_by(speech.pairs) %>% dplyr::summarise( speeches_word_count=sum(speeches_word_count))
speech.matrix <- matrix(unlist(strsplit(names(speech.table), "_")), ncol=2, byrow=T)
play.table <- data.frame(speech.matrix, as.vector(speech.table))
View(speech.matrix)
speakers <- xpathSApply(caesar, "//*/SPEECH/SPEAKER", xmlValue)
length(speakers)
receivers <- xpathSApply(caesar, "//*/SPEECH/RECEIVER", xmlValue)
length(receivers)
speeches <- xpathSApply(caesar, "//*/SPEECH/LINES", xmlValue)
speeches[1]
# count number of words in each speech
speeches_word_count = c()
for (i in 1:length(speeches)) {
speeches_word_count <- c(speeches_word_count, length(strsplit(speeches[i], split=" ")[[1]]))
}
# create table of speech_pairs, speech word count
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- data.frame(speech.pairs, speeches_word_count)
# aggregate on speech pair, summing word counts
library(dplyr)
speech.table <- speech.table %>% dplyr::group_by(speech.pairs) %>% dplyr::summarise( speeches_word_count=sum(speeches_word_count))
View(speech.table)
speech.matrix <- matrix(unlist(strsplit(names(speech.table), "_")), ncol=2, byrow=T)
View(speech.matrix)
strsplit(speech.table$speech.pairs[i], split="_" )
strsplit(speech.table$speech.pairs[1], split="_" )
strsplit(speech.table$speech.pairs, split="_" )
speech.table$speech.pairs[1]
View(speech.table)
speech.table <- data.frame(speech.table)
View(speech.table)
speech.table[1,]
speech.table[1,1]
as.character(speech.table[1,1])
strsplit(as.character(speech.table$speech.pairs[1]), split="_" )
# split unique speaker-receiver pairs
speakers = c()
receivers = c()
for (i in 1:length(speech.table)) {
temp <- strsplit(as.character(speech.table$speech.pairs[i]), split="_")
speakers <- c(speakers, temp[1])
receivers <- c(receivers, temp[2])
}
# BONUS: Use number of words exchanged as edge metric (not just number of conversations)
# find speakers
speakers <- xpathSApply(caesar, "//*/SPEECH/SPEAKER", xmlValue)
length(speakers)
receivers <- xpathSApply(caesar, "//*/SPEECH/RECEIVER", xmlValue)
length(receivers)
speeches <- xpathSApply(caesar, "//*/SPEECH/LINES", xmlValue)
speeches[1]
# count number of words in each speech
speeches_word_count = c()
for (i in 1:length(speeches)) {
speeches_word_count <- c(speeches_word_count, length(strsplit(speeches[i], split=" ")[[1]]))
}
# create table of speech_pairs, speech word count
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- data.frame(speech.pairs, speeches_word_count)
# aggregate on speech pair, summing word counts
library(dplyr)
speech.table <- speech.table %>% dplyr::group_by(speech.pairs) %>% dplyr::summarise( speeches_word_count=sum(speeches_word_count))
speech.table <- data.frame(speech.table)
# split unique speaker-receiver pairs
speakers = c()
receivers = c()
for (i in 1:length(speech.table)) {
temp <- strsplit(as.character(speech.table$speech.pairs[i]), split="_")
speakers <- c(speakers, temp[1])
receivers <- c(receivers, temp[2])
}
play.table <- data.frame(speakers, receivers, speech.table$speeches_word_count)
speakers
temp
temp[[1]]
temp[[1]][1]
speakers = c()
receivers = c()
for (i in 1:length(speech.table)) {
temp <- strsplit(as.character(speech.table$speech.pairs[i]), split="_")
speakers <- c(speakers, temp[[1]][1])
receivers <- c(receivers, temp[[1]][2])
}
length(speech.table)
speech.table
speech.table[[1]]
speakers = c()
receivers = c()
for (i in 1:length(speech.table[[1]])) {
temp <- strsplit(as.character(speech.table$speech.pairs[i]), split="_")
speakers <- c(speakers, temp[[1]][1])
receivers <- c(receivers, temp[[1]][2])
}
play.table <- data.frame(speakers, receivers, speech.table$speeches_word_count)
colnames(play.table) <- c("Speaker", "Receiver", "TotalSpeechWordCount")
View(play.table)
# BONUS: Use number of words exchanged as edge metric (not just number of conversations)
# find speakers
speakers <- xpathSApply(caesar, "//*/SPEECH/SPEAKER", xmlValue)
length(speakers)
receivers <- xpathSApply(caesar, "//*/SPEECH/RECEIVER", xmlValue)
length(receivers)
speeches <- xpathSApply(caesar, "//*/SPEECH/LINES", xmlValue)
speeches[1]
# count number of words in each speech
speeches_word_count = c()
for (i in 1:length(speeches)) {
speeches_word_count <- c(speeches_word_count, length(strsplit(speeches[i], split=" ")[[1]]))
}
# create table of speech_pairs, speech word count
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- data.frame(speech.pairs, speeches_word_count)
# aggregate on speech pair, summing word counts
library(dplyr)
speech.table <- speech.table %>% dplyr::group_by(speech.pairs) %>% dplyr::summarise( speeches_word_count=sum(speeches_word_count))
speech.table <- data.frame(speech.table)
# split unique speaker-receiver pairs
speakers = c()
receivers = c()
for (i in 1:length(speech.table[[1]])) {
temp <- strsplit(as.character(speech.table$speech.pairs[i]), split="_")
speakers <- c(speakers, temp[[1]][1])
receivers <- c(receivers, temp[[1]][2])
}
play.table <- data.frame(speakers, receivers, speech.table$speeches_word_count)
colnames(play.table) <- c("Speaker", "Receiver", "TotalSpeechWordCount")
library(igraph)
play.network<-graph_from_edgelist(speech.matrix)
# plot(play.network)
coords <- layout_(play.network, nicely()) # nicely chooses best algo out of all available to make nices graph
# Eigenvector centrality
plot(play.network, layout=coords, edge.wdith=E(play.network)$weight)
eigen <- evcent(play.network, weights=E(play.network)$weight)
eigen$vector
sort(eigen$vector, decreasing=T)
clust <- cluster_optimal(play.network) # clustering: identifies subnetworks within the global/whole network
V(play.network)$color <- membership(clust) # color vertices/nodes by cluster
plot(play.network, layout=coords, edge.wdith=E(play.network)$weight, vertex.size=25.0*eigen$vector)
# Betweenness Centrality
between.c<-betweenness(play.network)
between.c
sort(between.c, decreasing=T)
plot(play.network, edge.width=E(play.network)$weight, layout=coords, vertex.size=between.c/25.0)
library(XML)
setwd("/Users/jwang/Desktop/Coursework/English 184E/")
caesar <- xmlTreeParse("Shakespeare_Caesar_1599.xml", useInternalNodes=T)
# find speakers
speakers <- xpathSApply(caesar, "//*/SPEECH/SPEAKER", xmlValue)
length(speakers)
receivers <- xpathSApply(caesar, "//*/SPEECH/RECEIVER", xmlValue)
length(receivers)
speeches <- xpathSApply(caesar, "//*/SPEECH/LINES", xmlValue)
speeches[1]
# find unique speaker-receiver pairs
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- table(speech.pairs) # counts unique instances of each distinct entry in vector
speech.matrix <- matrix(unlist(strsplit(names(speech.table), "_")), ncol=2, byrow=T)
play.table <- data.frame(speech.matrix, as.vector(speech.table))
colnames(play.table) <- c("Speaker", "Receiver", "NumberofSpeeches")
library(igraph)
play.network<-graph_from_edgelist(speech.matrix)
plot(play.network)
coords <- layout_(play.network, nicely()) # nicely chooses best algo out of all available to make nices graph
# Eigenvector centrality
plot(play.network, layout=coords, edge.wdith=E(play.network)$weight)
eigen <- evcent(play.network, weights=E(play.network)$weight)
eigen$vector
sort(eigen$vector, decreasing=T)
clust <- cluster_optimal(play.network) # clustering: identifies subnetworks within the global/whole network
V(play.network)$color <- membership(clust) # color vertices/nodes by cluster
plot(play.network, layout=coords, edge.wdith=E(play.network)$weight, vertex.size=25.0*eigen$vector)
# Betweenness Centrality
between.c<-betweenness(play.network)
between.c
sort(between.c, decreasing=T)
plot(play.network, edge.width=E(play.network)$weight, layout=coords, vertex.size=between.c/25.0)
play.table
speech.matrix
# BONUS: Use number of words exchanged as edge metric (not just number of conversations)
# find speakers
speakers <- xpathSApply(caesar, "//*/SPEECH/SPEAKER", xmlValue)
length(speakers)
receivers <- xpathSApply(caesar, "//*/SPEECH/RECEIVER", xmlValue)
length(receivers)
speeches <- xpathSApply(caesar, "//*/SPEECH/LINES", xmlValue)
speeches[1]
# count number of words in each speech
speeches_word_count = c()
for (i in 1:length(speeches)) {
speeches_word_count <- c(speeches_word_count, length(strsplit(speeches[i], split=" ")[[1]]))
}
# create table of speech_pairs, speech word count
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- data.frame(speech.pairs, speeches_word_count)
# aggregate on speech pair, summing word counts
library(dplyr)
speech.table <- speech.table %>% dplyr::group_by(speech.pairs) %>% dplyr::summarise( speeches_word_count=sum(speeches_word_count))
speech.table <- data.frame(speech.table)
# split unique speaker-receiver pairs
speakers = c()
receivers = c()
for (i in 1:length(speech.table[[1]])) {
temp <- strsplit(as.character(speech.table$speech.pairs[i]), split="_")
speakers <- c(speakers, temp[[1]][1])
receivers <- c(receivers, temp[[1]][2])
}
play.table <- data.frame(speakers, receivers, speech.table$speeches_word_count)
colnames(play.table) <- c("Speaker", "Receiver", "TotalSpeechWordCount")
library(igraph)
play.network<-graph_from_edgelist(speech.matrix)
# plot(play.network)
coords <- layout_(play.network, nicely()) # nicely chooses best algo out of all available to make nices graph
# Eigenvector centrality
plot(play.network, layout=coords, edge.wdith=E(play.network)$weight)
eigen <- evcent(play.network, weights=E(play.network)$weight)
eigen$vector
sort(eigen$vector, decreasing=T)
clust <- cluster_optimal(play.network) # clustering: identifies subnetworks within the global/whole network
V(play.network)$color <- membership(clust) # color vertices/nodes by cluster
plot(play.network, layout=coords, edge.wdith=E(play.network)$weight, vertex.size=25.0*eigen$vector)
# Betweenness Centrality
between.c<-betweenness(play.network)
between.c
sort(between.c, decreasing=T)
plot(play.network, edge.width=E(play.network)$weight, layout=coords, vertex.size=between.c/25.0)
plot(play.network, layout=coords, edge.wdith=E(play.network)$weight, vertex.size=25.0*eigen$vector)
plot(play.network, edge.width=E(play.network)$weight, layout=coords, vertex.size=between.c/25.0)
sort(eigen$vector, decreasing=T)
sort(between.c, decreasing=T)
speech.matrix
play.table
graph_from_data_frame(play.table)
play.network <- graph_from_data_frame(play.table)
plot(play.network)
play.network<-graph_from_data_frame(play.table)
# BONUS: Use number of words exchanged as edge metric (not just number of conversations)
# find speakers
speakers <- xpathSApply(caesar, "//*/SPEECH/SPEAKER", xmlValue)
length(speakers)
receivers <- xpathSApply(caesar, "//*/SPEECH/RECEIVER", xmlValue)
length(receivers)
speeches <- xpathSApply(caesar, "//*/SPEECH/LINES", xmlValue)
speeches[1]
# count number of words in each speech
speeches_word_count = c()
for (i in 1:length(speeches)) {
speeches_word_count <- c(speeches_word_count, length(strsplit(speeches[i], split=" ")[[1]]))
}
# create table of speech_pairs, speech word count
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- data.frame(speech.pairs, speeches_word_count)
# aggregate on speech pair, summing word counts
library(dplyr)
speech.table <- speech.table %>% dplyr::group_by(speech.pairs) %>% dplyr::summarise( speeches_word_count=sum(speeches_word_count))
speech.table <- data.frame(speech.table)
# split unique speaker-receiver pairs
speakers = c()
receivers = c()
for (i in 1:length(speech.table[[1]])) {
temp <- strsplit(as.character(speech.table$speech.pairs[i]), split="_")
speakers <- c(speakers, temp[[1]][1])
receivers <- c(receivers, temp[[1]][2])
}
play.table <- data.frame(speakers, receivers, speech.table$speeches_word_count)
colnames(play.table) <- c("Speaker", "Receiver", "TotalSpeechWordCount")
library(igraph)
play.network<-graph_from_data_frame(play.table)
# plot(play.network)
coords <- layout_(play.network, nicely()) # nicely chooses best algo out of all available to make nices graph
# Eigenvector centrality
plot(play.network, layout=coords, edge.wdith=E(play.network)$weight)
eigen <- evcent(play.network, weights=E(play.network)$weight)
eigen$vector
sort(eigen$vector, decreasing=T)
clust <- cluster_optimal(play.network) # clustering: identifies subnetworks within the global/whole network
V(play.network)$color <- membership(clust) # color vertices/nodes by cluster
plot(play.network, layout=coords, edge.wdith=E(play.network)$weight, vertex.size=25.0*eigen$vector)
# Betweenness Centrality
between.c<-betweenness(play.network)
between.c
sort(between.c, decreasing=T)
plot(play.network, edge.width=E(play.network)$weight, layout=coords, vertex.size=between.c/25.0)
sort(eigen$vector, decreasing=T)
E(play.network)$weight
play.network
play.network$weight
library(XML)
setwd("/Users/jwang/Desktop/Coursework/English 184E/")
caesar <- xmlTreeParse("Shakespeare_Caesar_1599.xml", useInternalNodes=T)
# find speakers
speakers <- xpathSApply(caesar, "//*/SPEECH/SPEAKER", xmlValue)
length(speakers)
receivers <- xpathSApply(caesar, "//*/SPEECH/RECEIVER", xmlValue)
length(receivers)
speeches <- xpathSApply(caesar, "//*/SPEECH/LINES", xmlValue)
speeches[1]
# find unique speaker-receiver pairs
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- table(speech.pairs) # counts unique instances of each distinct entry in vector
speech.matrix <- matrix(unlist(strsplit(names(speech.table), "_")), ncol=2, byrow=T)
play.table <- data.frame(speech.matrix, as.vector(speech.table))
colnames(play.table) <- c("Speaker", "Receiver", "NumberofSpeeches")
library(igraph)
play.network<-graph_from_edgelist(speech.matrix)
plot(play.network)
coords <- layout_(play.network, nicely()) # nicely chooses best algo out of all available to make nices graph
# Eigenvector centrality
eigen <- evcent(play.network, weights=E(play.network)$weight)
eigen$vector
sort(eigen$vector, decreasing=T)
clust <- cluster_optimal(play.network) # clustering: identifies subnetworks within the global/whole network
V(play.network)$color <- membership(clust) # color vertices/nodes by cluster
plot(play.network, layout=coords, edge.width=E(play.network)$weight, vertex.size=25.0*eigen$vector)
# Betweenness Centrality
between.c<-betweenness(play.network)
between.c
sort(between.c, decreasing=T)
plot(play.network, edge.width=E(play.network)$weight, layout=coords, vertex.size=between.c/25.0)
E(play.network)
E(play.network)$weight
library(XML)
setwd("/Users/jwang/Desktop/Coursework/English 184E/")
caesar <- xmlTreeParse("Shakespeare_Caesar_1599.xml", useInternalNodes=T)
# find speakers
speakers <- xpathSApply(caesar, "//*/SPEECH/SPEAKER", xmlValue)
length(speakers)
receivers <- xpathSApply(caesar, "//*/SPEECH/RECEIVER", xmlValue)
length(receivers)
speeches <- xpathSApply(caesar, "//*/SPEECH/LINES", xmlValue)
speeches[1]
# find unique speaker-receiver pairs
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- table(speech.pairs) # counts unique instances of each distinct entry in vector
speech.matrix <- matrix(unlist(strsplit(names(speech.table), "_")), ncol=2, byrow=T)
play.table <- data.frame(speech.matrix, as.vector(speech.table))
colnames(play.table) <- c("Speaker", "Receiver", "NumberofSpeeches")
library(igraph)
play.network<-graph_from_edgelist(speech.matrix)
coords <- layout_(play.network, nicely()) # nicely chooses best algo out of all available to make nices graph
E(play.network)$weight <- play.table
E(play.network)$weight
eigen <- evcent(play.network, weights=E(play.network)$weight)
E(play.network)$weight <- play.table$NumberofSpeeches
eigen <- evcent(play.network, weights=E(play.network)$weight)
vector
eigen$vector
sort(eigen$vector, decreasing=T)
clust <- cluster_optimal(play.network) # clustering: identifies subnetworks within the global/whole network
V(play.network)$color <- membership(clust) # color vertices/nodes by cluster
plot(play.network, layout=coords, edge.width=E(play.network)$weight, vertex.size=25.0*eigen$vector)
plot(play.network, layout=coords, edge.width=E(play.network)$weight, vertex.size=25.0*eigen$vector)
between.c<-betweenness(play.network)
between.c
sort(between.c, decreasing=T)
plot(play.network, edge.width=E(play.network)$weight, layout=coords, vertex.size=between.c/25.0)
# BONUS: Use number of words exchanged as edge metric (not just number of conversations)
# find speakers
speakers <- xpathSApply(caesar, "//*/SPEECH/SPEAKER", xmlValue)
length(speakers)
receivers <- xpathSApply(caesar, "//*/SPEECH/RECEIVER", xmlValue)
length(receivers)
speeches <- xpathSApply(caesar, "//*/SPEECH/LINES", xmlValue)
speeches[1]
# count number of words in each speech
speeches_word_count = c()
for (i in 1:length(speeches)) {
speeches_word_count <- c(speeches_word_count, length(strsplit(speeches[i], split=" ")[[1]]))
}
# create table of speech_pairs, speech word count
speech.pairs <- paste(speakers, receivers, sep="_")
speech.table <- data.frame(speech.pairs, speeches_word_count)
# aggregate on speech pair, summing word counts
library(dplyr)
speech.table <- speech.table %>% dplyr::group_by(speech.pairs) %>% dplyr::summarise( speeches_word_count=sum(speeches_word_count))
speech.table <- data.frame(speech.table)
# split unique speaker-receiver pairs
speakers = c()
receivers = c()
for (i in 1:length(speech.table[[1]])) {
temp <- strsplit(as.character(speech.table$speech.pairs[i]), split="_")
speakers <- c(speakers, temp[[1]][1])
receivers <- c(receivers, temp[[1]][2])
}
play.table <- data.frame(speakers, receivers, speech.table$speeches_word_count)
colnames(play.table) <- c("Speaker", "Receiver", "TotalSpeechWordCount")
library(igraph)
play.network<-graph_from_data_frame(play.table)
E(play.network)$weight <- play.table$TotalSpeechWordCount
coords <- layout_(play.network, nicely()) # nicely chooses best algo out of all available to make nices graph
E(play.network)$weight
eigen <- evcent(play.network, weights=E(play.network)$weight)
eigen$vector
sort(eigen$vector, decreasing=T)
clust <- cluster_optimal(play.network) # clustering: identifies subnetworks within the global/whole network
V(play.network)$color <- membership(clust) # color vertices/nodes by cluster
plot(play.network, layout=coords, edge.width=E(play.network)$weight, vertex.size=25.0*eigen$vector)
plot(play.network, layout=coords, edge.width=E(play.network)$weight, vertex.size=25.0*eigen$vector)
plot(play.network)
between.c<-betweenness(play.network)
sort(between.c, decreasing=T)
plot(play.network, layout=coords, edge.width=E(play.network)$weight, vertex.size=25.0*eigen$vector)
plot(play.network, layout=coords, edge.width=E(play.network)$weight, vertex.size=eigen$vector)
plot(play.network, layout=coords, edge.width=E(play.network)$weight, vertex.size=10.0*eigen$vector)
plot(play.network, layout=coords, edge.width=E(play.network)$weight, vertex.size=25.0*eigen$vector)
plot(play.network, layout=coords, edge.width=E(play.network)$weight/100.0, vertex.size=25.0*eigen$vector)
plot(play.network, layout=coords, edge.width=E(play.network)$weight/100.0, vertex.size=25.0*eigen$vector)
plot(play.network, layout=coords, edge.width=E(play.network)$weight/100.0, vertex.size=25.0*eigen$vector)
plot(play.network, layout=coords, edge.width=E(play.network)$weight/100.0, vertex.size=20.0*eigen$vector)
plot(play.network, layout=coords, edge.width=E(play.network)$weight/100.0, vertex.size=15.0*eigen$vector)
between.c<-betweenness(play.network)
between.c
sort(between.c, decreasing=T)
plot(play.network, edge.width=E(play.network)$weight, layout=coords, vertex.size=between.c/25.0)
plot(play.network, edge.width=E(play.network)$weight/100.0, layout=coords, vertex.size=between.c/25.0)
plot(play.network, edge.width=E(play.network)$weight/100.0, layout=coords, vertex.size=between.c/15.0)
plot(play.network, edge.width=E(play.network)$weight/100.0, layout=coords, vertex.size=between.c/50.0)
setwd("/Users/jwang/Desktop/Chen/RotationActivity/Results/")
data <- read.csv("delta_distribution.csv", header=T, stringsAsFactors=F)
source('~/Desktop/Chen/RotationActivity/Results/delta_distribution.R', echo=TRUE)
View(data)
histogram(data)
hist(data)
View(data)
?strptime
df <- read.csv("delta_distribution.csv", header=T, stringsAsFactors=F)
strptime(df$delta, format='%H:%M:%S')
source('~/Desktop/Chen/RotationActivity/Results/delta_distribution.R', echo=TRUE)
hist(df)
View(df)
plot(df)
import(ggplot2)
library(ggplot2)
names(df) <- ("Delta", "Count")
names(df) <- c("Delta", "Count")
ggplot(df, aes(y=Count)) + geom_lines()
library(ggplot2)
names(df) <- c("Delta", "Count")
ggplot(df, aes(y=Count)) + geom_lines()
ggplot(df, aes(y=Count)) + geom_point()
ggplot(df, aes(y=Count)) + geom_point(aes(y=Count))
ggplot(df, aes(y=Count)) + geom_point(aes(Count))
ggplot(df, aes(y=Count)) + geom_point(aes(Delta,Count))
df$Delta
which(df$delta <= "2018-01-20 00:30:00 PST")
which(df$delta <= strptime('00:30:00'))
which(df$delta <= strptime('00:30:00', format='%H:%M:%S'))
which(df$delta <= strptime('00:30:00', format='%H:%M:%S'))
strptime('00:30:00', format='%H:%M:%S')
strptime('00:30:00', format='%H:%M:%S') < strptime('00:31:00', format='%H:%M:%S')
source('~/Desktop/Chen/RotationActivity/Results/delta_distribution.R', echo=TRUE)
