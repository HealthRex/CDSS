11/5/2019

Here are some useful resources for you to prepare for Tutorial 1.
	1. Unix: 
			a. Unix for Beginners: http://www.ee.surrey.ac.uk/Teaching/Unix/
			b. Unix Tutorial for Beginners: https://www.cs.sfu.ca/~ggbaker/reference/unix/
			c. Unix Commands: https://www.unixtutorial.org/commands
	2. Python, the preferred language to accelerate your data science career:
			a. Introduction to Python Programming at Udacity: https://www.udacity.com/course/introduction-to-python--ud1110
	3. Jupyter Notebooks, modern collaborative data science platform:
			a. Installing Jupyter Notebooks:  https://jupyter.readthedocs.io/en/latest/install.html
	4. Git (version control, the foundation for reproducible collaborative science):
			a. Basics of Git: https://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/
			b. git - the simple guide: https://rogerdudler.github.io/git-guide/
			c. Gitlab ssh key setup:  https://www.tutorialspoint.com/gitlab/gitlab_ssh_key_setup.htm
			d. Gitlab: https://docs.gitlab.com/ee/gitlab-basics/create-your-ssh-keys.html 
	5. Observational Health Data Sciences and Informatics (OHDSI) Observational Medical Outcomes Partnership (OMOP) Common Data Model (CDM):
			a. OMOP CDM: https://www.ohdsi.org/data-standardization/the-common-data-model/
			b. The Book of OHDSI: https://ohdsi.github.io/TheBookOfOhdsi/
			c. Notable Publications: 
					i. Identifying Appropriate Reference Data Models for Comparative Effectiveness Research (CER) Studies Based on Data from Clinical Information Systems
					ii. Transforming the Premier Perspective Hospital Database into the Observational Medical Outcomes Partnership (OMOP) Common Data Model.
We recommend you install Jupyter Notebooks , git and set up your ssh keys before the tutorial. 


https://docs.google.com/presentation/d/13SDhC7A8o_rR3pbiO8Gnz2gEP5-awzlfJyu-jrUpyCg/edit?usp=sharing


Priya Desai - Product Manager
Jose Posada - Clinical Research Scientist (also in Shah lab)

PhD + MD students from Khatri, Boussard lab, Immunology
Staff in BMIR, Pop Health Sciences
  Interest in data access
Stefanie Leonard - Instructor - Perinatal Epidemiology - Interest in OMOP



Quick Hands on
- https://console.cloud.google.com
- Project: 
  https://console.cloud.google.com/home/dashboard?project=som-rit-starr-training
  Under resources: 
     som-rit-starr-training (Project)
     synpuf_2m_20191023 (Sample, De-ID database with 2M person sample)


Stanford centrally managed workgroups, otherwise individual GCP IAM access control
   May take 10 minutes to propagate access controls through



Will need own GCP project once want to start accessing STARR-OMOP data, tracking own billing.
GCP Overview
- Resources: Physical data centers, VMs, etc.
- Services: Compute Engines, Cloud Storage (buckets), BigQuery
- Projects: Organizing entity for resources
   Services need to be part of a project to be able to use them
   Manages sets of users, permissions, APIs, billing, authentication information
   https://cloud.google.com/bigquery/pricing
   Overall very cheap for storage. Charge per query processing, but largely cheap too.


Why BigQuery?
- Scalable (petabytes) with more data and users. Don't need to buy more hardware, etc.
  (On prem STRIDE/Clarity requires army to keep maintaining)
- Fully managed, highly available data warehoues solution. No IT personnel
  (Don't worry about database admin/optimization)
- Standard SQL
- Near real time analytics
- Programmatic interaction - REST APIs support Java, Python, Ruby, PHP, etc.
- Big Data ecosystem of tools

Why Cloud Computing?
- Scalable, provision as needed instead of capital investment
- Multiple managed services can use
- Infrastructure as code (reproducible systems), easier to share
- HIPAA compliant services for high risk data (specific services already signed off by Stanford)
- Faster, cheaper, reliable, more secure (if architected correctly)


Can add more Dataset Resources, including publicly available ones already loaded, like synthetic data
Example: SynPUF is synthetic patient dataset based on CMS claims
Stanford Research IT adapted this into OMOP common data model (v5.3) to explore that structure
Patient IDs continuity across time / insurance plan, unlike Optum/Truven that will change ID if patient switches insurance.

Lots of "Concept IDs" in OMOP data. Concept table is like "one true code table" to lookup all data types (gender, ethnicity, meds, diagnoses, essentially anything). Persistent concept ID index across versions so don't clobber prior versions.


Why CDM - Common Data Model?
- No single observational databases captures all clinical events equally well (e.g., EMR and claims databases serve different purposes, so capture different data emphasis)
- Research results from disparate data sources need to be compared and contrasted
- CDM as standard and extensible collection of schemas (entities, attributes, relationships)
  Well-defined semantics, to facilitate interoperability
- FAIR principles
- Open science community: OHDSI
- OMOP: Observational Medical Outcomes Partnership
- Becoming de facto international standard
  Tries to use standards: 
     SNOMED-CT for diagnosis codes. 
     RXnorm for drugs.
     LOINC for labs
     Procedures are still a hodgepodge
  Don't lose provenance. Keeps original data copy as well
- Everything is a "concept" in OMOP (similar to clinical_item model)
  concept_relationship and concept_ancestor as well
    Sometimes loops in ancestors as well? But mostly a tree.
- Patient centric data model, so only tries to capture things that happen to patient, not workflow/process. Essentially everything needs a patient_id column. Cancelled orders will be dropped if wasn't executed on patient.


Google Cloud SDK (requires Python)
https://cloud.google.com/sdk/install
- Install then run "gcloud init"

Need to create authentication key JSON file
- gcloud auth application-default login
  Should require a web login, then creates local JSON file that can use to simulate login via stanford.edu account?


Python - Google Cloud connection libraries 

  pip install --upgrade google-cloud-bigquery



  https://cloud.google.com/bigquery/docs/visualize-jupyter




Jupytr Notebooks
- 

See support Notebooks in Jupyter for examples of tips and tricks for reviewing and manipulating datasets.
https://code.stanford.edu/starr/nero-starr-notebooks


Nero projects are much more restricted in terms of access between users and APIs
- STARR OMOP will live in central project, but others will have read access to it
  Have to be in your own project, then do a view connection to STARR-OMOP production project
  User level permissions



